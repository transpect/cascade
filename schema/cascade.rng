<?xml version="1.0" encoding="UTF-8"?>
<grammar 
  xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" 
  xmlns:s="http://purl.oclc.org/dsdl/schematron"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  ns="http://transpect.io"
  datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

  <s:ns uri="http://transpect.io" prefix="tr"/>
  <s:ns uri="http://transpect.io/cascade" prefix="cascade"/>

  <start>
    <ref name="conf"/>
  </start>
  
  <define name="conf">
    <element name="conf">
      <ref name="content-base-uri"/>
      <optional>
        <attribute name="paths-xsl-uri">
          <data type="anyURI"/>
        </attribute>
      </optional>
      <optional>
        <ref name="cascade"/>
      </optional>  
    </element>
  </define>

  <define name="content-base-uri">
    <optional>
      <attribute name="content-base-uri">
        <data type="anyURI"/>
      </attribute>
    </optional>
  </define>

  <define name="param">
    <element name="param">
      <a:documentation>Name-value pairs that may contain arbitrary configuration options that 
      may be assigned to the clades. In their XProc documentation, transpect modules should give you a list of 
      configuration parameters that will be read from the cascade.</a:documentation>
      <attribute name="name"/>
      <attribute name="value"/>
    </element>
  </define>
  <define name="cascade">
    <element name="cascade">
      <a:documentation>Contains declarations of the content categorization that corresponds to the different cofiguration
        inheritance levels.</a:documentation>
      <zeroOrMore>
        <element name="reserved">
          <s:pattern id="reserved">
            <s:rule context="tr:clade">
              <s:report test="@name = ancestor::tr:cascade/tr:reserved/@name">'<s:value-of select="@name"/>' is a reserved name.</s:report>
            </s:rule>
          </s:pattern>
          <a:documentation>Subdirectory names (in the code repo below adaptions or in the content repo below the current content
            item) that must not be assigned to a clade or content item name.</a:documentation>
          <attribute name="name"/>
        </element>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="param"/>
      </zeroOrMore>
      <oneOrMore><ref name="clade"/></oneOrMore>
    </element>
  </define>

  <define name="clade-model">
    <choice>
      <group>
        <optional>
          <ref name="content"/>
        </optional>
        <zeroOrMore>
          <ref name="clade"/>
        </zeroOrMore>
      </group>
      <ref name="same-as"/>      
    </choice>
  </define>
  
  <define name="same-as">
    <element name="same-as">
      <a:documentation>Refer to another clade of the same role whose name is given by same-as/@clade and reuse its content model
        (everything below it except params, that is, content and clade elements). This element has been introduced in order 
        to avoid redundancy in the config file.</a:documentation>
      <attribute name="clade"/>
    </element>
    <s:pattern id="unique-same-as">
      <s:rule context="tr:same-as">
        <s:let name="referenced-clade" value="//tr:clade[not(. is current()/..)][@role = current()/../@role][@name = current()/@clade]"/>
        <s:assert test="count($referenced-clade) = 1">There must be exactly one clade (not the parent clade though)
          of role '<s:value-of select="../@role"/>' with the name '<s:value-of select="@clade"/>'.</s:assert>
      </s:rule>
    </s:pattern>
  </define>

  <define name="clade">
    <s:pattern id="globally-unique">
      <s:rule context="tr:clade[not(tr:clade)]">
        <s:let name="other-clades" value="//tr:clade[not(. is current())]"/>
        <s:let name="other-branch-clades" value="$other-clades[empty(. intersect current()/ancestor::tr:clade)]"/>
        <s:let name="footprint" value="for $c in ancestor-or-self::tr:clade return concat($c/@role, '=', $c/@name)"/>
        <s:let name="footprint-path" value="string-join($footprint, ',')"/> 
        <s:report test="$other-clades[every $i in (for $c in ancestor-or-self::tr:clade return concat($c/@role, '=', $c/@name)) 
                                      satisfies $i = $footprint]
                                     [every $i in $footprint 
                                      satisfies $i = (for $c in ancestor-or-self::tr:clade return concat($c/@role, '=', $c/@name))]
         ">There is another clade that may not be discerned from the current clade.
           Please use a different name or surround one of the clades with a clade of a different role.</s:report>
        <!--<s:report test="$other-branch-clades[string-join(for $c in ancestor-or-self::tr:clade return concat($c/@role, '=', $c/@name), ',')
                                              = $footprint-path]
         ">This clade has the same path as another clade. This ambiguity may prevent the converter from selecting a unique clade for a given input.</s:report>-->
      </s:rule>
    </s:pattern>
    <s:pattern id="at-most-one-default-clade-in-given-context">
      <s:rule context="tr:clade[@default]">
        <s:let name="sister-clades" value="following-sibling::tr:clade"/>
        <s:report test="exists($sister-clades[@default])">At most one clade may be specified as the default clade in a given context.</s:report>
      </s:rule>
    </s:pattern>
    <element name="clade">
      <attribute name="role"/>
      <attribute name="name"/>
      <ref name="content-base-uri"/>

      <optional>
        <attribute name="default">
          <a:documentation>When a clade should be the default but you don’t want the parsed filename to contain a string 
          that selects the clade, you can use this attribute on the clade. You need to make sure in your importing paths.xsl
          that you overwrite not only the function tr:parse-file-name(), but also the global variable $parse-file-name.
      
          Consider this conf snippet:
<![CDATA[<clade role="production-line" name="D7">
  <clade name="07" role="edition" default="true">
    <content role="article" name-regex="^D7-.+"/>
  </clade>
  <clade name="06" role="edition">
    <content role="article" name-regex="^D7-.+"/>
  </clade>
</clade>]]>
          Suppose that parsing a file name D7-edition07-stuff.xml leads to the attributes production-line="D7",
          edition="07". Since 07 is the default (currently developed) edition, you don’t want each filename to include this
          edition string. You want D7-stuff.xml to parse as the same attributes production-line="D7", edition="07".
          You then write a more liberal regex that will match production-line and article, and if the production line has
          a default edition, this edition will be included in the parsing result as if it had been present in the file name.
          
          You can achieve this by overriding the global variable $parse-file-name:
  <![CDATA[<xsl:variable name="parse-file-name" as="attribute(*)*">
    <xsl:variable name="prelim-parse-file-name" as="attribute(*)*" select="tr:parse-file-name($file)"/>
    <xsl:variable name="production-line" as="xs:string?" select="$prelim-parse-file-name[name() = 'production-line']"/>
    <xsl:variable name="default-edition-clade" 
      select="//tr:clade[@role = 'production-line'][@name = $production-line]
                  /tr:clade[@role = 'edition'][@default = 'true']"/>
    <xsl:if test="exists($production-line)
                  and empty($prelim-parse-file-name[name() = 'edition'])
                  and exists($default-edition-clade)">
      <xsl:attribute name="edition" select="string($default-edition-clade/@name)"/>
    </xsl:if>
    <xsl:sequence select="$prelim-parse-file-name"/>
  </xsl:variable>]]>
          </a:documentation>
          <value>true</value>
        </attribute>
      </optional>
      
      <optional>
        <!-- What is this attribute for? It is at least referred to in paths.xsl. -->
        <attribute name="file-name-component"/>
      </optional>
      <optional>
        <!-- What is this attribute for? Is it used anywhere? -->
        <attribute name="filesystem-path-component"/>
      </optional>
      <zeroOrMore>
        <ref name="param"/>
      </zeroOrMore>
      <ref name="clade-model"/>
    </element>
  </define>
  
  <define name="content">
    <s:pattern id="max-levels">
      <s:rule context="tr:content[not(*)]">
        <s:assert test="count(ancestor-or-self::*[local-name() = ('content', 'clade')]) le 8">Currently, only 8 levels 
          of configuration (plus a common level) are supported.</s:assert>
      </s:rule>
    </s:pattern>
    <element name="content">
      <attribute name="role"/>
      <optional>
        <attribute name="name-regex"/>
      </optional>
      <ref name="content-base-uri"/>
      <zeroOrMore>
        <ref name="param"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="content"/>
      </zeroOrMore>
    </element>
  </define>

</grammar>
